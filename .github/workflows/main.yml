name: Auto tests For OnlineVotingApplication
on:
  push:
    branches:
      - master
env:
  PG_DATABASE: online_voting_DB
  PG_USER: postgres
  PG_PASSWORD: ${{ secrets.password_DB }}
jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{secrets.password_DB }}
          POSTGRES_DB: online_voting_DB
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test
      - name: Run the app
        id: run-app
        run: |
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=7000 npm start &
          sleep 5
      - name: Run integration tests
        run: |
          npm install cypress cypress-json-results
          npx cypress run

  deploy:
    name: Automaic Deployment
    needs: [run-tests] #before deployment run tests
    runs-on: ubuntu-latest

    steps:
      - name: Backend application deployment in Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICEID}}
          api-key: ${{ secrets.API_TOKEN }}

  notifications-tests:
    name: Test Notifications
    needs: [run-tests] ## should run tests
    runs-on: ubuntu-latest
    if: ${{ always() }} ## runs or independent on previous jobs. i.e always show notifications
    steps:
      - name: Discord Notifications for Test Results
        env:
          DISCORD_WEBHOOKURL: ${{ secrets.DISCORD_WEBHOOKURL }}
        run: |
          if [[ ${{ needs.run-tests.result }} == 'success' ]]; then
            curl -X POST -H 'Content-type: application/json' --data '{"content":" *Test cases* completed successfully. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
          else
            curl -X POST -H 'Content-type: application/json' --data '{"content":" *Test cases* failed. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
          fi

  notifications-deploy:
    name: Deployment Notifications
    needs: [deploy] ## should run deployment
    runs-on: ubuntu-latest
    if: ${{ always() }} ## runs or independent on previous jobs. i.e always show notifications
    steps:
      - name: Discord Notifications for Deployment Results
        env:
          DISCORD_WEBHOOKURL: ${{ secrets.DISCORD_WEBHOOKURL }}
        run: |
          if [[ ${{ needs.deploy.result }} == 'success' ]]; then
            curl -X POST -H 'Content-type: application/json' --data '{"content":" *Deployment of application* completed successfully. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
          else
            curl -X POST -H 'Content-type: application/json' --data '{"content":" *Deployment of the application* failed. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
          fi

  push-notification:
    name: Push Notification
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Discord Notifications for Push Event
        env:
          DISCORD_WEBHOOKURL: ${{ secrets.DISCORD_WEBHOOKURL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"content":"A new push event has been triggered on the master branch of the repository. Check it out at: https://github.com/${{ github.repository }}/tree/${{ github.ref }}"}' $DISCORD_WEBHOOKURL

  # notifications:
  #   needs: [run-tests, deploy] ## should run tests and deployments
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }} ## runs or indepnedt on previous jobs. i.e always show notifications
  #   steps:
  #     - name: Discord Notifications
  #       env:
  #         DISCORD_WEBHOOKURL: ${{ secrets.DISCORD_WEBHOOKURL }}
  #       run: |
  #         if [[ ${{ needs.run-tests.result }} == 'success' ]]; then
  #           curl -X POST -H 'Content-type: application/json' --data '{"content":" *Test cases* completed successfully. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
  #         fi
  #         if [[ ${{ needs.deploy.result }} == 'success' ]]; then
  #           curl -X POST -H 'Content-type: application/json' --data '{"content":" *Deployment of application* completed successfully. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
  #         fi
  #         if [[ ${{ needs.run-tests.result }} == 'failure' ]]; then
  #           curl -X POST -H 'Content-type: application/json' --data '{"content":" *Test cases* failed. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
  #         fi
  #         if [[ ${{ needs.deploy.result }} == 'failure' ]]; then
  #           curl -X POST -H 'Content-type: application/json' --data '{"content":" *Deployment of the application* failed. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $DISCORD_WEBHOOKURL
  #         fi
